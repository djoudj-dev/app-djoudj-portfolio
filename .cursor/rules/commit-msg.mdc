---
description: 
globs: 
---
## Génère un message de commit clair et structuré en respectant les conventions suivantes :

# Format du commit :

type(scope): description
Ne pas dépasser 50 caractères pour la description.
Ajouter une ligne vide après la description.
Ajouter une explication détaillée en 2 à 3 phrases maximum si nécessaire.
Chaque nouvelle phrase de l'explication doit commencer par un tiret -, y compris la première phrase.

# Types de commit disponibles :

feat : Nouvelle fonctionnalité
fix : Correction de bug
refactor : Refactorisation du code
chore : Tâche de maintenance
hotfix : Correction urgente
release : Publication de version
update : Mise à jour
dependencies : Mise à jour des dépendances
perf : Amélioration des performances
test : Modification des tests
docs : Documentation
style : Modifications de style
ci : Configuration CI/CD
revert : Annulation d'un commit
security : Correctif de sécurité
i18n : Internationalisation
a11y : Accessibilité

# Scopes disponibles :

component(ui), component(form), component(pages) (Composants Angular)
service(auth), service(api), service(store) (Services Angular)
style(theme), style(layout) (Styles et CSS)
config(env), config(build) (Configuration du projet)
deps, build, test, docs, ci, perf, security (Autres domaines)

# Règles spécifiques :

Utiliser un verbe à l'impératif dans la description (ex: "Ajoute", "Corrige", "Optimise").
Pour un Breaking Change, ajouter ! après le type (feat!, fix!).
Pour une dépréciation, utiliser DEPRECATED: dans le footer.
Pour des références, utiliser Réf: suivi de l’ID du ticket ou commit.

# Exemples de commits corrects :

feat(component:ui): Ajoute un bouton de validation
fix(service:auth): Corrige un bug de connexion
perf(component:pages): Optimise le rendu des listes
security(service:auth): Renforce le hachage des mots de passe
revert(component:modal): Annule la dernière modification
Génère un message de commit en suivant ces règles. 
